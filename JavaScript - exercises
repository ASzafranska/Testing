Exercises - Level beginner

Below is a structure that you can paste into any IDE, in my case it is VS (visual studio code). In order to develop the following examples, or in order to test them, 
we will need an extension called Live Server available in VS. It is also useful for the title of our file with the html extension. But from the beginning :)

Steps:
1. We create a folder where we will keep the files (in my case, it will be a folder named "JavaScriptForBeginner" on  the desktop)
2. Openning VS
3. Downoland the extension Live Server from the Extension Tab
4. Click in "Files" in the left-hand corner
5. Click on the "Open a folder"
6. Choose the made folder
7. Click "New a file"
8. Get name (for example exerciseForBeginner.html) Remember about .html!
9. Write ! and click enter. Our result: We should have the html strukture
10. Write <script> <script> under the <body> <body> 
11. If you wanta check undering examples in browser you need to click the right button of mouse and select the Open in Live Server
12. Then you need to click F12, open the devtools -> check the console tab
13. Have Fun :D

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>

// 1
const array = [22,44,66];
const resultArray = array[2];
console.log(resultArray)
// Response: 66 Why? array[2] that means second element of array. Remember the elements in array numbering from 0. 

//2
const array1 = [22,44,66];
const resultArray1 = array[3];
console.log(resultArray1)
// Response: udenfined  Why? Array include element: 0, 1, 2 we haven't 3 element, the console log will show underfined

//3
const object = Object.assign({
name: "Orange"
}, {
name: "Cherry"
}, {
name: "Strawberry"
});

const resultObject = obj.name 
console.log(resultObject)
//Response: Strawberry Why? We write name , which last takes the value "Strawberry"

//4 
const array2 = [5,6,7,8,9,10,8,11,12];
const result1 = array.indexOf(7);  
const result2 = array.indexOf(8);  
const result3 = array.lastIndexOf(8); 
console.log(result1); //Response: 2
console.log(result2); //Response: 3
console.log(result3); //Response: 6
/* Why? Method indexOf () returns number of index. Method lastIndexOf() returns index of element from ending. For example we have two numbers of 8 i nour array. 
Method lastIndexOf executed and return first of ending. 

//5
const a = "2023" - "1999"; 
console.log(a)
// Response: 24 Why? Type conversion, our two strings are treated as numbers

//6
const string1 = /word/i;
const string2 = "Hello Word!";
const resultString = string1.test(string2); 
console.log(resultString)
/*Response: true  Why? The test() method executes a search with this regular expression for a match between a regular expression and a specified string. 
"i" thanks to it, we look for a value without looking whether it is lowercase or uppercase. */

//7
const x = funtion() {
return 5677
}
const resultX = 5222 && func();
console.log(resultX)

//Response: 5677 Why? The logical operator AND (&&) works as follows, if the first condition is met, return the second condition

//8
const numbers = new Set([4,5,7,8]);
numbers.add(7);
const rersultNumbers = value.size;
console.log(resultNumbers)
/* Response: 4  Why? Inserts a new element with a specified value in to a Set object, if there isn't an element with the same value already in the Set. 
The number 7 is repeated, therefore it will not be added and we still have 4 elements */

//9
const y = "11_44_88_".splice("_");
console.log(y)
//Response: ["11","44","88"] Why? Method slice() serves to returns selected the extracted part as a new array. 

//10
const array3 = [77,214,666];
array3.shift();
const resultArray3 = array;
console.log(resultArray3)
//Response: [214,666] Why? Method shift() serves to pulls the first element from the array, then the array returns the results without the first element

//11
const true = false;
const resultTrue = true ? 30000 : 44;
console.log(resultTrue)
/* Response: 44 Why? It is ternary operator. It uses for three operands. Structure is condition? expression 1 : expression 2. 
If condition is true, the operator returns the value od expression 1, otherwise it return the value of expression 2 */ 

//12
const string4 = "Ala ma kota";
const resultString4 = string4.replace(/o/g, "a");
console.log(resultString4);
//Response: "Olo mo koto" Why Method replace switches the letter a on o. 

//13
const type = typeof false;
const type1 = typeof true;
const type2 = typeof "234";
const type3 = typeof 55;
const type4 = typeof function () {};
const type5 = typeof null;
const type6 = typeof underfined;

console.log(type); // boolean
console.log(type1); // boolean
console.log(type2); // string
console.log(type3); // number
console.log(type4); // function
console.log(type5); // object
console.log(type6); // underfined
//Why? Method typeof() returns primitive type 

//14
const array4 = [11,12,13,14,15];
array.concat(16,17,18);
const resultArray4 = array4;
console.log(resultArray4);
//Response: [1,2,3] Why? The concat method is used to connecton arrays

//15
const resultMath = Math.sqrt(4);
console.log(resultMath); 
//Response: 2 Why? Method Math.sqrt() is used as square

    </script>
</body>
</html>



